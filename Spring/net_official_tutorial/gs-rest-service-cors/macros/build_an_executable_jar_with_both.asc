//
// WARNING: DO NOT EDIT THIS FILE unless you are inside the getting-started-macros repo.
// For more information see https://github.com/spring-guides/draft-gs-template/wiki/Pull-in-needed-macros
// to see how this macro is used for writing Getting Started guides.
//

:linkattrs:

Now that your `Application` class is ready, you simply instruct the build system to create a single, executable jar containing everything. This makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth.

Below are the Gradle steps, but if you are using Maven, you can find the updated pom.xml https://github.com/spring-guides/{project_id}/blob/master/complete/pom.xml[right here] and build it by typing `mvn clean package`.

Update your Gradle `build.gradle` file's `buildscript` section, so that it looks like this:

[source,java]
----
buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:0.5.0.M4")
    }
}
----

Further down inside `build.gradle`, add the following to the list of applied plugins:

[source,java]
apply plugin: 'spring-boot'

You can see the final version of `build.gradle` https://github.com/spring-guides/{project_id}/blob/master/complete/build.gradle[right here].

The https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin[Spring Boot gradle plugin] collects all the jars on the classpath and builds a single "Ã¼ber-jar", which makes it more convenient to execute and transport your service.
It also searches for the `public static void main()` method to flag as a runnable class.

Now run the following command to produce a single executable JAR file containing all necessary dependency classes and resources:

[subs="attributes"]
....
$ ./gradlew build
....

If you are using Gradle, you can run the JAR by typing:

[subs="attributes"]
....
$ java -jar build/libs/{project_id}-0.1.0.jar
....

If you are using Maven, you can run the JAR by typing:

[subs="attributes"]
....
$ java -jar target/{project_id}-0.1.0.jar
....

NOTE: The procedure above will create a runnable JAR. You can also opt to link:/guides/gs/convert-jar-to-war/[build a classic WAR file] instead.

