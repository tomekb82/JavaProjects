<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">
	    
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- ************************************************************************** -->
	<!--                                 AOP                                        -->
	<aop:aspectj-autoproxy />
	<aop:config>
		<aop:aspect ref="monitor">
			<aop:pointcut id="calculate" expression="execution(* eu.tbelina.spring.service.impl.ExpenseService.getExpenses(..))" />
			<aop:before pointcut-ref="calculate" method="beforeCalculation"/>
			<aop:after-returning pointcut-ref="calculate" method="afterCalculation"/>
			<aop:after-throwing pointcut-ref="calculate" method="incorrectCalculation"/>
			
			<!-- IMPORTANT: UNCOMMENT THIS LINE FOR EFFICIENCY TESTS ONLY
			<aop:around pointcut-ref="calculate" method="calculatePerformance"/>  -->
		</aop:aspect>
	</aop:config>
	
	<bean id="monitor" class="eu.tbelina.spring.aop.Monitor">
	</bean>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven /> 
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!--  Handling static requests -->
	<mvc:resources mapping="/resources/**" location="/resources/" /> 
	
	<!-- **************************************************************************** -->
	<!--                                  Spring RMI                                  --> 
	
	<bean class="org.springframework.remoting.rmi.RmiServiceExporter">  
    	<property name="service" ref="expenseService"></property>  
    	<property name="serviceInterface" value="eu.tbelina.spring.service.IExpenseService"></property>  
    	<property name="serviceName" value="ExpenseService"></property>  
    	<property name="replaceExistingBinding" value="true"></property>  
    	<property name="registryPort" value="1099"></property>  
	</bean> 
	
	<!-- ***************************************************************************** -->
	<!-- 						    SPRING OBJECT MAPPING User 						   -->
	
	<!--  									Services                                   -->                
	
	<!-- Expenses: Hibernate Service Declaration -->
	<bean id="expenseService" class="eu.tbelina.spring.service.impl.ExpenseService">
		<property name="expenseDAO" ref="hibernateExpenseDAO" />
	</bean>
	<!-- Expenses: Jdbc Service Declaration -->
	<!-- <bean id="ExpenseService" class="eu.tbelina.spring.service.impl.ExpenseService">
		<property name="expenseDAO" ref="jdbcExpenseDAO" />
	</bean> -->
	
	<!-- Expenses: SimpleJdbc Service Declaration -->
	<!-- <bean id="ExpenseService" class="eu.tbelina.spring.service.impl.ExpenseService">
		<property name="expenseDAO" ref="simpleJdbcExpenseDAO" />
	</bean> -->
	
	<bean id="UserService" class="eu.tbelina.spring.service.impl.UserService">
		<property name="userDAO" ref="UserDAO" />
	</bean>
	
	<!-- AngularJS mapping -->
	<bean id="personService" class="eu.tbelina.angularjs.service.impl.PersonService"/>
	
	
	<!-- ***************************************************************************** -->
	<!--                                      DAOs                                     -->
	
	<!-- Expenses: Hibernate DAO Declaration -->
	<bean id="hibernateExpenseDAO" class="eu.tbelina.spring.dao.impl.hibernate.HibernateExpenseDAO">
		<property name="sessionFactory" ref="SessionFactory" />
	</bean>
	<!-- Expenses: Jdbc Expense DAO Declaration -->
	<!-- 	<bean id="jdbcExpenseDAO" class="eu.tbelina.spring.dao.impl.jdbc.JdbcExpenseDAO">
		<property name="dataSource" ref="jdbcDataSource" />
	</bean> -->
	<!-- Expenses: SimpleJdbc Expense DAO Declaration -->
	<!-- <bean id="simpleJdbcExpenseDAO" class="eu.tbelina.spring.dao.impl.jdbc.SimpleJdbcExpenseDAO">
		<property name="dataSource" ref="jdbcDataSource" />
	</bean> --> 
	<!-- TODO: Expenses: JPA DAO Declaration -->
	<!-- 	<bean id="jpaExpenseDAO" class="eu.tbelina.spring.dao.impl.jpa.JpaExpenseDAO">
		<property name="em" ref="emf" />
	</bean> -->
	
	<bean id="UserDAO" class="eu.tbelina.spring.dao.impl.hibernate.UserDAO">
		<property name="sessionFactory" ref="SessionFactory" />
	</bean>
	
	<!-- ***************************************************************************** -->
	<!--                DATA SOURCES/ SESSION FACTORY                                  -->
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
    		<value>WEB-INF/classes/config/database/db.properties</value>
    	</property>
	</bean>
	<!-- Data Source Declaration -->
	<bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="10" />
		<property name="maxStatements" value="0" />
		<property name="minPoolSize" value="5" />
	</bean> 

	<!-- Expenses: JDBC Data Source Declaration -->
	<!-- <bean id="jdbcDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">		
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/SpringProject" />
		<property name="username" value="postgres" />
		<property name="password" value="postgres" />
	</bean> -->
	
	<!-- Session Factory Declaration -->
	<bean id="SessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="DataSource" />
		<property name="annotatedClasses">
			<list>
				<value>eu.tbelina.spring.model.User</value>
				<value>eu.tbelina.spring.model.Expense</value> 
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- ************************************************************************ -->
	<!--                              Transactions                                -->
	
	<!-- Enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- Transaction Manager is defined -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="SessionFactory" />
	</bean>
	
	<!-- ************************************************************************ -->
	<!--                        Components packages                               -->
	<context:component-scan base-package="eu.tbelina.spring.*" />
	<context:component-scan base-package="eu.tbelina.angularjs.*"/>
		
</beans>
